
#include "cla_shared.h"




__interrupt void Cla1Task1 ( void )
{
    /* TODO: Protection will be added
     *
     * */
    Cla1Task1_counter++;
    M2_OperationMode = MODE_CLA_MPCCONTROLLER;

    fsw_cost_multipler = 1.0f;


    if(M2_OperationMode==MODE_CLA_MPCCONTROLLER)
    {

        GetEncoderReadings_cla(&Module2_Parameters_cla);

        GetAdcReadings_cla(&Module2_Parameters_cla);

        CalculateParkTransform_cla(&Module2_Parameters_cla);

#if ENABLE_TORQUE_DISTRIBUTOR
        Module2_Parameters_cla.Reference.Iq = M2_Iqref_cla;
#else
        Module2_Parameters_cla.Reference.Iq = PI_iq_cla.Output/((float)2.0f);
#endif

        Module2_Parameters_cla.Reference.Id = IDREF;

        Module2_Parameters_cla.MinimumCostValue = (float)1e35;

        M1_Next_Interrupt_Moment = M1_Interrupt_Moment_to_cla + 200000*(index_value_prev+1);

#if 0
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,0);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,0);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,1);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,1);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,2);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,2);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,3);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,3);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,4);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,4);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,5);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,5);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,6);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,6);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,7);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,7);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,8);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,8);
        ExecuteFirstPrediction_cla(&Module2_Parameters_cla,9);
        ExecuteSecondPrediction_cla(&Module2_Parameters_cla,9);
#else
        if(index_value_prev==0)
        {
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,0u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,0u);
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,1u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,1u);
        }
        else if(index_value_prev==9)
        {
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,8u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,8u);
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,9u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,9u);
        }
        else
        {
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,index_value_prev-1u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,index_value_prev-1u);
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,index_value_prev);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,index_value_prev);
            ExecuteFirstPrediction_cla(&Module2_Parameters_cla,index_value_prev+1u);
            ExecuteSecondPrediction_cla(&Module2_Parameters_cla,index_value_prev+1u);
        }
#endif

        GetSvpwmDutyCycles_cla(Module2_Parameters_cla.SecondHorizon[Module2_Parameters_cla.MinimumCostIndex].SvpwmT1,\
                           Module2_Parameters_cla.SecondHorizon[Module2_Parameters_cla.MinimumCostIndex].SvpwmT2,\
                           Module2_Parameters_cla.SecondHorizon[Module2_Parameters_cla.MinimumCostIndex].SvpwmT0,\
                           (1.0f/((float)Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex])),\
                           Module2_Parameters_cla.SecondHorizon[Module2_Parameters_cla.MinimumCostIndex].VoltageVectorAngleRad,\
                           &Module2_Parameters_cla.PhaseADutyCycle,\
                           &Module2_Parameters_cla.PhaseBDutyCycle,\
                           &Module2_Parameters_cla.PhaseCDutyCycle);

        if(Module2_Parameters_cla.PhaseADutyCycle>1.0f)
            Module2_Parameters_cla.PhaseADutyCycle = 1.0f;
        if(Module2_Parameters_cla.PhaseADutyCycle<0.0f)
            Module2_Parameters_cla.PhaseADutyCycle = 0.0f;
        if(Module2_Parameters_cla.PhaseBDutyCycle>1.0f)
            Module2_Parameters_cla.PhaseBDutyCycle = 1.0f;
        if(Module2_Parameters_cla.PhaseBDutyCycle<0.0f)
            Module2_Parameters_cla.PhaseBDutyCycle = 0.0f;
        if(Module2_Parameters_cla.PhaseCDutyCycle>1.0f)
            Module2_Parameters_cla.PhaseCDutyCycle = 1.0f;
        if(Module2_Parameters_cla.PhaseCDutyCycle<0.0f)
            Module2_Parameters_cla.PhaseCDutyCycle = 0.0f;

        M2_FswDecided_prev_cla = M2_FswDecided_cla;
        M2_FswDecided_cla = Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex];
        index_value_prev = Module2_Parameters_cla.MinimumCostIndex;
    }

    if(M2_OperationMode==MODE_CLA_MPCCONTROLLER)
    {
        /*apply the switching frequencies*/
        HWREGH(EPWM4_BASE+EPWM_O_TBPRD) = (uint16_t )(((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f));
        HWREGH(EPWM5_BASE+EPWM_O_TBPRD) = (uint16_t )(((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f));
        HWREGH(EPWM6_BASE+EPWM_O_TBPRD) = (uint16_t )(((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f));

        /*apply the duty cycles*/
        HWREG(EPWM4_BASE+EPWM_O_CMPA) = (((uint32_t)((Module2_Parameters_cla.PhaseADutyCycle*((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f))))<<16);
        HWREG(EPWM5_BASE+EPWM_O_CMPA) = (((uint32_t)((Module2_Parameters_cla.PhaseBDutyCycle*((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f))))<<16);
        HWREG(EPWM6_BASE+EPWM_O_CMPA) = (((uint32_t)((Module2_Parameters_cla.PhaseCDutyCycle*((float )SYSCLKFREQUENCY) / (Module2_Parameters_cla.OptimizationFsw[Module2_Parameters_cla.MinimumCostIndex] * 4.0f))))<<16);
    }


}

__interrupt void Cla1Task2 ( void )
{

}

__interrupt void Cla1Task3 ( void )
{

}

__interrupt void Cla1Task4 ( void )
{

}

__interrupt void Cla1Task5 ( void )
{

}

__interrupt void Cla1Task6 ( void )
{

}

__interrupt void Cla1Task7 ( void )
{

}

__interrupt void Cla1Task8 ( void )
{

}

float CLA_Power(float base, uint16_t power)
{
    uint16_t i=0;
    float result = 1.0f;
    for(i=0;i<power;i++)
    {
        result = result*base;
    }
    return result;
}

float CLA_floating_modulus(float a,float b)
{
    float mod;
    unsigned int integer_multipler;
    // Handling negative values
    if (a < 0.0f)
        mod = -a;
    else
        mod =  a;
    if (b < 0.0f)
        b = -b;

    integer_multipler = (unsigned int )(((float)mod)/((float)b));

    mod = mod - ((float)((float) integer_multipler )*((float)b));

    if (a < 0.0f)
        return -mod;

    return mod;
}
void GetSvpwmDutyCycles_cla(float T1, float T2, float T0,float Ts,float VectorAngleRad, float *DutyA, float *DutyB, float *DutyC)
{
#if 0
    if(FaultFlagLocal==YES_FAULT)
    {
        if (CLA_floating_modulus(VectorAngleRad, 2.0f*PI)<=PI)
        {
            *DutyB = (T1+T0/2.0f)/Ts;
            *DutyC = (T0/2.0f)/Ts;
        }
        else
        {
            *DutyC = (T1+T0/2.0f)/Ts;
            *DutyB = (T0/2.0f)/Ts;
        }
        *DutyA = 0;
        return;
    }
#endif


    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=PI/3.0f)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=0))
    {
        *DutyA = (T1+T2+T0/2.0f)/Ts;
        *DutyB = (T2+T0/2.0f)/Ts;
        *DutyC = (T0/2.0f)/Ts;
        return;
    }

    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=2.0f*PI/3.0f)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=PI/3.0f))
    {
        *DutyA = (T1+T0/2.0f)/Ts;
        *DutyB = (T1+T2+T0/2.0f)/Ts;
        *DutyC = (T0/2.0f)/Ts;
        return;
    }

    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=PI)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=2*PI/3.0f))
    {
        if(CLA_floating_modulus(VectorAngleRad, PI)==0)
        {
            *DutyA = (T0/2.0f)/Ts;
            *DutyB = (T1+T0/2.0f)/Ts;
            *DutyC = (T1+T2+T0/2.0f)/Ts;
        }
        else
        {
            *DutyA = (T0/2.0f)/Ts;
            *DutyB = (T1+T2+T0/2.0f)/Ts;
            *DutyC = (T2+T0/2.0f)/Ts;
        }
        return;
    }

    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=4.0f*PI/3.0f)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=PI))
    {
        *DutyA = (T0/2.0f)/Ts;
        *DutyB = (T1+T0/2.0f)/Ts;
        *DutyC = (T1+T2+T0/2.0f)/Ts;
        return;
    }
    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=5.0f*PI/3.0f)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=4.0f*PI/3.0f))
    {
        *DutyA = (T2+T0/2.0f)/Ts;
        *DutyB = (T0/2.0f)/Ts;
        *DutyC = (T1+T2+T0/2.0f)/Ts;
        return;
    }
    if ((CLA_floating_modulus(VectorAngleRad,2.0f*PI)<=2.0f*PI)&&(CLA_floating_modulus(VectorAngleRad,2.0f*PI)>=5.0f*PI/3.0f))
    {
        *DutyA = (T1+T2+T0/2.0f)/Ts;
        *DutyB = (T0/2.0f)/Ts;
        *DutyC = (T1+T0/2.0f)/Ts;
        return;
    }

}
void ExecuteFirstPrediction_cla(ModuleParameters *moduleparams, unsigned int indexcount)
{
    moduleparams->CurrentHorizon[indexcount].VdPrediction = moduleparams->FirstHorizon[indexcount].VdPrediction;  // First horizon prediction on the previous horizon is our current value now
    moduleparams->CurrentHorizon[indexcount].VqPrediction = moduleparams->FirstHorizon[indexcount].VqPrediction;  // First horizon prediction on the previous horizon is our current value now

    moduleparams->FirstHorizon[indexcount].IdPrediction = moduleparams->Measured.Current.transformed.Dvalue + (0.5f/M2_FswDecided_cla+0.5f / moduleparams->OptimizationFsw[indexcount]) * (moduleparams->CurrentHorizon[indexcount].VdPrediction / M2_LS_VALUE - M2_RS_VALUE / M2_LS_VALUE * moduleparams->Measured.Current.transformed.Dvalue + M2_LS_VALUE / M2_LS_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * moduleparams->Measured.Current.transformed.Qvalue);
    moduleparams->FirstHorizon[indexcount].IqPrediction = moduleparams->Measured.Current.transformed.Qvalue + (0.5f/M2_FswDecided_cla+0.5f / moduleparams->OptimizationFsw[indexcount]) * (moduleparams->CurrentHorizon[indexcount].VqPrediction / M2_LS_VALUE - M2_RS_VALUE / M2_LS_VALUE * moduleparams->Measured.Current.transformed.Qvalue - M2_LS_VALUE / M2_LS_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * moduleparams->Measured.Current.transformed.Dvalue - FLUX_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical / M2_LS_VALUE);
}
void ExecuteSecondPrediction_cla(ModuleParameters *moduleparams, unsigned int indexcount)
{
    moduleparams->FirstHorizon[indexcount].VdPrediction = M2_VD_VQ_KP_CLA * (moduleparams->Reference.Id -  moduleparams->FirstHorizon[indexcount].IdPrediction) * (1.0f + M2_VD_VQ_KI_CLA / moduleparams->OptimizationFsw[indexcount]) + moduleparams->Measured.Current.transformed.Dvalue - POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * M2_LS_VALUE * moduleparams->FirstHorizon[indexcount].IqPrediction;
    moduleparams->FirstHorizon[indexcount].VqPrediction = M2_VD_VQ_KP_CLA * (moduleparams->Reference.Iq -  moduleparams->FirstHorizon[indexcount].IqPrediction) * (1.0f + M2_VD_VQ_KI_CLA / moduleparams->OptimizationFsw[indexcount]) + moduleparams->Measured.Current.transformed.Qvalue + POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * (M2_LS_VALUE * moduleparams->FirstHorizon[indexcount].IdPrediction+ FLUX_VALUE);

    moduleparams->SecondHorizon[indexcount].Magnitude = CLAsqrt(CLA_Power(moduleparams->FirstHorizon[indexcount].VdPrediction,2) + CLA_Power(moduleparams->FirstHorizon[indexcount].VqPrediction,2));

    moduleparams->SecondHorizon[indexcount].Valfa = CLAsin(moduleparams->AngleRad.Electrical) * moduleparams->FirstHorizon[indexcount].VdPrediction + CLAcos(moduleparams->AngleRad.Electrical) * moduleparams->FirstHorizon[indexcount].VqPrediction;
    moduleparams->SecondHorizon[indexcount].Vbeta =-CLAcos(moduleparams->AngleRad.Electrical) * moduleparams->FirstHorizon[indexcount].VdPrediction + CLAsin(moduleparams->AngleRad.Electrical) * moduleparams->FirstHorizon[indexcount].VqPrediction;

    moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad = CLAatan2(moduleparams->SecondHorizon[indexcount].Vbeta, moduleparams->SecondHorizon[indexcount].Valfa) + 4.0f*PI + POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * (0.0f/moduleparams->OptimizationFsw[indexcount]+0.0f/M2_FswDecided_cla);
    moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad_Mod = CLA_floating_modulus(moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad, PI / 3.0f);

    moduleparams->SecondHorizon[indexcount].ma = CLAsqrt(3.0f)*moduleparams->SecondHorizon[indexcount].Magnitude / (moduleparams->Measured.Voltage.Vdc );

#if 0
#if 0
    M2_Next_Interrupt_Moment = M2_Interrupt_Moment_to_cla + 1.0f/moduleparams->OptimizationFsw[indexcount];
#else
    M2_Next_Interrupt_Moment = M2_Interrupt_Moment_to_cla + 200000/(indexcount+1);
#endif

    if(M2_Next_Interrupt_Moment>M1_Next_Interrupt_Moment)
    {
        if(((M2_Next_Interrupt_Moment - M1_Next_Interrupt_Moment)>((200000/(indexcount+1)/2)-500))&&(((M2_Next_Interrupt_Moment - M1_Next_Interrupt_Moment)<((200000/(indexcount+1)/2)+500))))
        {
            fsw_cost_multipler = 1.0f;
        }
        else
        {
            fsw_cost_multipler = 3.0f;
        }

    }
    else
    {
        if(((M1_Next_Interrupt_Moment - M2_Next_Interrupt_Moment)>((200000/(indexcount+1)/2)-500))&&(((M1_Next_Interrupt_Moment - M2_Next_Interrupt_Moment)<((200000/(indexcount+1)/2)+500))))
        {
            fsw_cost_multipler = 1.0f;
        }
        else
        {
            fsw_cost_multipler = 3.0f;
        }
    }
#else
    //M1fsw_M2fsw_PhaseDifference_prediction = - 1.0f/M1_FswDecided_to_cla + M1fsw_M2fsw_PhaseDifference_to_cla + 1.0f/moduleparams->OptimizationFsw[indexcount];

    M1fsw_M2fsw_PhaseDifference_prediction = 1.0f/M1_FswDecided_to_cla - (M1fsw_M2fsw_PhaseDifference_to_cla + 1.0f/moduleparams->OptimizationFsw[indexcount] );

#if 0
    if(((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla)<0.45f)&&((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla)<0.55f))
    {
        fsw_cost_multipler = 1.0f;
    }
    else
    {
        fsw_cost_multipler = 2.5f;
    }
#endif
#endif

#if 0
    if ((((CLA_fabsf(M2_Next_Interrupt_Moment-M1_Next_Interrupt_Moment))*M1_FswDecided_to_cla) > 0.74f) && (((CLA_fabsf(M2_Next_Interrupt_Moment-M1_Next_Interrupt_Moment))*M1_FswDecided_to_cla) < 0.76f))
    {
        fsw_cost_multipler = 1.0f;
    }
    else
    {
        fsw_cost_multipler = 3.0f;
    }
#endif


    /*
    if (((abs(M2_Next_Int_Moment-M1_Next_Int_Moment))*M1_fsw) > 0.74) && (((abs(M2_Next_Int_Moment-M1_Next_Int_Moment))*M1_fsw) < 0.76)

    else

        FswCoeff(i) = 1250*3;
%                 IqRippleCoeff = 100000;
    end
    */

#if 0
    if(FaultFlagLocal==YES_FAULT)
    {
        moduleparams->SecondHorizon[indexcount].SvpwmT1 = (1.0f / moduleparams->OptimizationFsw[indexcount]) * moduleparams->SecondHorizon[indexcount].ma * CLAsin(CLA_floating_modulus(moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad, PI));
        moduleparams->SecondHorizon[indexcount].SvpwmT2 = 0;
        moduleparams->SecondHorizon[indexcount].SvpwmT0 = (1.0f / moduleparams->OptimizationFsw[indexcount]) - moduleparams->SecondHorizon[indexcount].SvpwmT1 - moduleparams->SecondHorizon[indexcount].SvpwmT2;
    }
    else
    {
        moduleparams->SecondHorizon[indexcount].SvpwmT1 = (1.0f / moduleparams->OptimizationFsw[indexcount]) * moduleparams->SecondHorizon[indexcount].ma * CLAsin(PI / 3.0f - moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad_Mod);
        moduleparams->SecondHorizon[indexcount].SvpwmT2 = (1.0f / moduleparams->OptimizationFsw[indexcount]) * moduleparams->SecondHorizon[indexcount].ma * CLAsin(moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad_Mod);
        moduleparams->SecondHorizon[indexcount].SvpwmT0 = (1.0f / moduleparams->OptimizationFsw[indexcount]) - moduleparams->SecondHorizon[indexcount].SvpwmT1 - moduleparams->SecondHorizon[indexcount].SvpwmT2;
    }
#endif

    moduleparams->SecondHorizon[indexcount].SvpwmT1 = (1.0f / moduleparams->OptimizationFsw[indexcount]) * moduleparams->SecondHorizon[indexcount].ma * CLAsin(PI / 3.0f - moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad_Mod);
    moduleparams->SecondHorizon[indexcount].SvpwmT2 = (1.0f / moduleparams->OptimizationFsw[indexcount]) * moduleparams->SecondHorizon[indexcount].ma * CLAsin(moduleparams->SecondHorizon[indexcount].VoltageVectorAngleRad_Mod);
    moduleparams->SecondHorizon[indexcount].SvpwmT0 = (1.0f / moduleparams->OptimizationFsw[indexcount]) - moduleparams->SecondHorizon[indexcount].SvpwmT1 - moduleparams->SecondHorizon[indexcount].SvpwmT2;

    moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT1 = 0.66667f * moduleparams->Measured.Voltage.Vdc - moduleparams->SecondHorizon[indexcount].Magnitude;
    moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT2 = 0.66667f * moduleparams->Measured.Voltage.Vdc - moduleparams->SecondHorizon[indexcount].Magnitude;
    moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT0 = -moduleparams->SecondHorizon[indexcount].Magnitude;

    moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT1 = moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT1 * moduleparams->SecondHorizon[indexcount].SvpwmT1 / M2_LS_VALUE;
    moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT2 = moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT2 * moduleparams->SecondHorizon[indexcount].SvpwmT2 / M2_LS_VALUE;
    moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT0 = -moduleparams->SecondHorizon[indexcount].VoltageDuring_SvpwmT0 * moduleparams->SecondHorizon[indexcount].SvpwmT0 / M2_LS_VALUE;

    moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction = moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT1 + moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT2 + moduleparams->SecondHorizon[indexcount].Iq_Delta_DuringT0;

    moduleparams->SecondHorizon[indexcount].IdPrediction = moduleparams->FirstHorizon[indexcount].IdPrediction + (1.0f / moduleparams->OptimizationFsw[indexcount]) * (moduleparams->FirstHorizon[indexcount].VdPrediction / M2_LS_VALUE - M2_RS_VALUE / M2_LS_VALUE * moduleparams->FirstHorizon[indexcount].IdPrediction + M2_LS_VALUE / M2_LS_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * moduleparams->FirstHorizon[indexcount].IqPrediction);
    moduleparams->SecondHorizon[indexcount].IqPrediction = moduleparams->FirstHorizon[indexcount].IqPrediction + (1.0f / moduleparams->OptimizationFsw[indexcount]) * (moduleparams->FirstHorizon[indexcount].VqPrediction / M2_LS_VALUE - M2_RS_VALUE / M2_LS_VALUE * moduleparams->FirstHorizon[indexcount].IqPrediction - M2_LS_VALUE / M2_LS_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical * moduleparams->FirstHorizon[indexcount].IdPrediction - FLUX_VALUE * POLEPAIRS * moduleparams->AngularSpeedRadSec.Mechanical / M2_LS_VALUE);

    /*TODO add protection to cost*/
#if 0
#if 0
    moduleparams->Cost[indexcount] = phase_cost_coeff*CLA_fabsf((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)) + IQRIPPLECOEFF * CLA_Power(moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction / IQ_RATED, 2) + IQREFCOEFF * CLA_Power((moduleparams->Reference.Iq - moduleparams->SecondHorizon[indexcount].IqPrediction) / IQ_RATED, 2) + IDREFCOEFF * CLA_Power((moduleparams->Reference.Id - moduleparams->SecondHorizon[indexcount].IdPrediction)/IQ_RATED, 2) + fsw_cost_multipler * FSWCOEFF * moduleparams->OptimizationFsw[indexcount] / OPT_FSW_MAX;
#else
    moduleparams->Cost[indexcount] = 0.0f*CLA_fabsf((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla- 0.5f)) + IQRIPPLECOEFF * CLA_Power(moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction / IQ_RATED, 2) + IQREFCOEFF * CLA_Power((moduleparams->Reference.Iq - moduleparams->SecondHorizon[indexcount].IqPrediction) / IQ_RATED, 2) + IDREFCOEFF * CLA_Power((moduleparams->Reference.Id - moduleparams->SecondHorizon[indexcount].IdPrediction)/IQ_RATED, 2) + fsw_cost_multipler * FSWCOEFF * moduleparams->OptimizationFsw[indexcount] / OPT_FSW_MAX;
#endif
#elif 1

    //moduleparams->Cost[indexcount] = CostFunctionCoeff.M2DifferentFsw*CLA_Power((moduleparams->OptimizationFsw[indexcount]-M1_FswDecided_to_cla)/OPT_FSW_MAX, 2) + CostFunctionCoeff.M2FswPhase*CLA_fabsf((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)) + CostFunctionCoeff.IqRipple * CLA_Power(moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction / IQ_RATED, 2) + CostFunctionCoeff.IqReference * CLA_Power((moduleparams->Reference.Iq - moduleparams->SecondHorizon[indexcount].IqPrediction) / IQ_RATED, 2) + CostFunctionCoeff.IdReference * CLA_Power((moduleparams->Reference.Id - moduleparams->SecondHorizon[indexcount].IdPrediction)/IQ_RATED, 2) + CostFunctionCoeff.Fsw  * moduleparams->OptimizationFsw[indexcount] / OPT_FSW_MAX;
    //cost(i) = 50000*( abs(M1fsw_M2fsw_PhaseDifference_prediction) *  M1_fsw - .25)^2 + DifferentFswCost + 500*((FswOptions(i)-M1_fsw)/FswMax)^2+(IqRipplePredictionArray_2(i)/Iq_Rated)^2*IqRippleCoeff+IqRefCoeff*((iqref-IqPrediction_2)/Iq_Rated)^2+((idref-IdPrediction_2)/Iq_Rated)^2*IdRefCoeff+ProtectionConstant+FswOptions(i)/FswMax*FswCoeff(i);%+IqRipplePrediction_prev^2*100000000;
    //moduleparams->Cost[indexcount] = CostFunctionCoeff.M2FswPhase*CLA_fabsf((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla
    moduleparams->Cost[indexcount] = CostFunctionCoeff.M2FswPhase*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff) + CostFunctionCoeff.M2DifferentFsw*CLA_Power((moduleparams->OptimizationFsw[indexcount]-M1_FswDecided_to_cla)/OPT_FSW_MAX, 2) + CostFunctionCoeff.IqRipple * CLA_Power(moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction / IQ_RATED, 2) + CostFunctionCoeff.IqReference * CLA_Power((moduleparams->Reference.Iq - moduleparams->SecondHorizon[indexcount].IqPrediction) / IQ_RATED, 2) + CostFunctionCoeff.IdReference * CLA_Power((moduleparams->Reference.Id - moduleparams->SecondHorizon[indexcount].IdPrediction)/IQ_RATED, 2) + CostFunctionCoeff.Fsw  * moduleparams->OptimizationFsw[indexcount] / OPT_FSW_MAX;

#elif 1

    moduleparams->Cost[indexcount] = CostFunctionCoeff.M2DifferentFsw*CLA_Power((moduleparams->OptimizationFsw[indexcount]-M1_FswDecided_to_cla)/OPT_FSW_MAX, 2) + CostFunctionCoeff.M2FswPhase*CLA_fabsf((CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)*(CLA_fabsf(M1fsw_M2fsw_PhaseDifference_prediction)*M1_FswDecided_to_cla - somecoeff)) + CostFunctionCoeff.IqRipple * CLA_Power(moduleparams->SecondHorizon[indexcount].Iq_Ripple_Prediction / IQ_RATED, 2) + CostFunctionCoeff.IqReference * CLA_Power((moduleparams->Reference.Iq - moduleparams->SecondHorizon[indexcount].IqPrediction) / IQ_RATED, 2) + CostFunctionCoeff.IdReference * CLA_Power((moduleparams->Reference.Id - moduleparams->SecondHorizon[indexcount].IdPrediction)/IQ_RATED, 2) + CostFunctionCoeff.Fsw  * moduleparams->OptimizationFsw[indexcount] / OPT_FSW_MAX;
#endif
    if (moduleparams->Cost[indexcount] < moduleparams->MinimumCostValue)
    {
        moduleparams->MinimumCostValue = moduleparams->Cost[indexcount];
        moduleparams->MinimumCostIndex = indexcount;
    }
}

void Run_PI_Controller_cla(PID_Parameters *pidparams)
{
    pidparams->Output = pidparams->Output_prev + pidparams->P_coeff * (pidparams->Input - pidparams->Input_prev) + (pidparams->Ts) / 2.0f * pidparams->I_coeff * (pidparams->Input + pidparams->Input_prev);
    if (pidparams->Output > pidparams->SaturationMax)
    {
        pidparams->Output = pidparams->SaturationMax;
    }
    if (pidparams->Output < pidparams->SaturationMin)
    {
        pidparams->Output = pidparams->SaturationMin;
    }
    pidparams->Output_prev = pidparams->Output;
    pidparams->Input_prev = pidparams->Input;
}
void GetEncoderReadings_cla(ModuleParameters *moduleparams)
{
    /*CPU2 does not need speed information, only angle information is needed*/
    moduleparams->AngleRad.Mechanical = ((float)HWREG(EQEP2_BASE+EQEP_O_QPOSCNT))/((float)ENCODERMAXTICKCOUNT)* 2.0f * PI;
    moduleparams->AngleRad.Electrical =  moduleparams->AngleRad.Mechanical*POLEPAIRS;
}
void GetAdcReadings_cla(ModuleParameters *moduleparams)
{
    moduleparams->Measured.Current.PhaseA = M2_IA_CURRENT_FLOAT_CLA;
    moduleparams->Measured.Current.PhaseB = M2_IB_CURRENT_FLOAT_CLA;
    moduleparams->Measured.Current.PhaseC = M2_IC_CURRENT_FLOAT_CLA;
    moduleparams->Measured.Voltage.Vdc = M2_VDC_VOLTAGE_FLOAT_CLA;
}
void CalculateParkTransform_cla(ModuleParameters *moduleparams)
{
    moduleparams->Measured.Current.transformed.Dvalue = 0.66667f * (moduleparams->Measured.Current.PhaseA * CLAsin(moduleparams->AngleRad.Electrical) + moduleparams->Measured.Current.PhaseB * CLAsin(moduleparams->AngleRad.Electrical - 0.66667f * PI /*2*PI/3*/) + moduleparams->Measured.Current.PhaseC * CLAsin(moduleparams->AngleRad.Electrical + 0.66667f * PI /*2*PI/3*/));
    moduleparams->Measured.Current.transformed.Qvalue = 0.66667f * (moduleparams->Measured.Current.PhaseA * CLAcos(moduleparams->AngleRad.Electrical) + moduleparams->Measured.Current.PhaseB * CLAcos(moduleparams->AngleRad.Electrical - 0.66667f * PI /*2*PI/3*/) + moduleparams->Measured.Current.PhaseC * CLAcos(moduleparams->AngleRad.Electrical + 0.66667f * PI /*2*PI/3*/));
#if 0
    moduleparams->PhaseCurrent.ZeroValue = 0.66667*0.5*(moduleparams->Measured.Current.PhaseA\
            +moduleparams->Measured.Current.PhaseB\
            +moduleparams->Measured.Current.PhaseC);
#endif
    //ids = 2/3*(ias*sin(ref_frame_position)+ibs*sin(ref_frame_position-2*pi/3)+ics*sin(ref_frame_position+2*pi/3));
    //iqs =  2/3*(ias*cos(ref_frame_position)+ibs*cos(ref_frame_position-2*pi/3)+ics*cos(ref_frame_position+2*pi/3));
    //i0 = 2/3*1/2*(ias+ibs+ics);
}
float CLA_fabsf(float value)
{
    if(value>0.0f)
    {
        return value;
    }
    else
    {
        return -1.0f*value;
    }
}
